using System;
using System.Collections.Generic;
using System.Drawing;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace BlockchainWinForms
{
    public partial class Form1 : Form
    {
        // Danh s√°ch m√¥ ph·ªèng chu·ªói blockchain
        private List<Block> blockchain = new List<Block>();

        public Form1()
        {
            InitializeComponent();

            // G√°n tr·∫°ng th√°i kh·ªüi ƒë·∫ßu cho label
            lblStatus.Text = "‚è≥ Ch∆∞a t·∫°o chu·ªói blockchain";
            lblStatus.ForeColor = Color.Gray;
        }

        // N√∫t: T·∫°o Blockchain m·∫´u
        private void btnGenerate_Click(object sender, EventArgs e)
        {
            blockchain.Clear(); // X√≥a chu·ªói c≈©

            // T·∫°o block g·ªëc (Genesis block)
            blockchain.Add(new Block(0, "Genesis Block", "0"));

            // T·∫°o th√™m 4 block ti·∫øp theo (block 1 -> 8)
            for (int i = 1; i <= 8; i++)
            {
                var prev = blockchain[i - 1];
                blockchain.Add(new Block(i, $"Giao d·ªãch {i}", prev.Hash));
            }

            UpdateComboBox();    // C·∫≠p nh·∫≠t danh s√°ch ch·ªçn block
            DisplayBlockchain(); // Hi·ªÉn th·ªã ra m√†n h√¨nh
        }

        // C·∫≠p nh·∫≠t danh s√°ch ComboBox ƒë·ªÉ ch·ªçn block c·∫ßn s·ª≠a
        private void UpdateComboBox()
        {
            cboBlockIndex.Items.Clear();
            for (int i = 1; i < blockchain.Count; i++) // B·ªè qua Genesis Block
            {
                cboBlockIndex.Items.Add($"Block {i}");
            }

            if (cboBlockIndex.Items.Count > 0)
                cboBlockIndex.SelectedIndex = 0;
        }

        // N√∫t: S·ª≠a d·ªØ li·ªáu trong block ƒë∆∞·ª£c ch·ªçn
        private void btnTamper_Click(object sender, EventArgs e)
        {
            if (blockchain.Count < 2) return;
            if (cboBlockIndex.SelectedIndex == -1) return;

            int index = cboBlockIndex.SelectedIndex + 1; // V√¨ b·ªè qua block 0
            string newData = txtTamperData.Text.Trim();

            if (string.IsNullOrEmpty(newData))
            {
                MessageBox.Show("H√£y nh·∫≠p d·ªØ li·ªáu m·ªõi ƒë·ªÉ s·ª≠a block.");
                return;
            }

            blockchain[index].Data = newData;                      // C·∫≠p nh·∫≠t d·ªØ li·ªáu
            blockchain[index].Hash = blockchain[index].ComputeHash(); // C·∫≠p nh·∫≠t l·∫°i hash

            DisplayBlockchain();
            MessageBox.Show($"üîß ƒê√£ s·ª≠a d·ªØ li·ªáu Block {index}. Chu·ªói b·ªã ph√° v·ª°!");
        }

        // N√∫t: C·∫≠p nh·∫≠t l·∫°i to√†n b·ªô chu·ªói t·ª´ block 1
        private void btnUpdateChain_Click(object sender, EventArgs e)
        {
            for (int i = 1; i < blockchain.Count; i++)
            {
                blockchain[i].PreviousHash = blockchain[i - 1].Hash;
                blockchain[i].Hash = blockchain[i].ComputeHash();
            }

            DisplayBlockchain();
            MessageBox.Show("‚úÖ Chu·ªói ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫°i!");
        }

        // H√†m hi·ªÉn th·ªã to√†n b·ªô blockchain, ki·ªÉm tra to√†n v·∫πn v√† t√¥ m√†u l·ªói
        private void DisplayBlockchain()
        {
            rtbBlocks.Clear();
            bool isValid = true;

            for (int i = 0; i < blockchain.Count; i++)
            {
                var block = blockchain[i];

                string shortHash = block.Hash.Length >= 10 ? block.Hash.Substring(0, 10) : block.Hash;
                string shortPrev = block.PreviousHash.Length >= 10 ? block.PreviousHash.Substring(0, 10) : block.PreviousHash;

                string display = $"Block {block.Index}\n" +
                                 $"Data: {block.Data}\n" +
                                 $"Hash: {shortHash}...\n" +
                                 $"PrevHash: {shortPrev}...";

                // Ki·ªÉm tra xem chu·ªói c√≥ b·ªã sai kh√¥ng (hash kh√¥ng kh·ªõp)
                bool blockError = (i > 0 && block.PreviousHash != blockchain[i - 1].Hash);

                if (blockError)
                {
                    display += " [‚ùå L·ªñI: Hash kh√¥ng kh·ªõp]";
                    rtbBlocks.SelectionColor = Color.Red;
                    isValid = false;
                }
                else
                {
                    rtbBlocks.SelectionColor = Color.Black;
                }

                rtbBlocks.AppendText(display + "\n\n");
            }

            // Ghi tr·∫°ng th√°i t·ªïng th·ªÉ c·ªßa chu·ªói
            lblStatus.Text = isValid ? "‚úÖ Chu·ªói h·ª£p l·ªá" : "‚ùå Chu·ªói b·ªã l·ªói";
            lblStatus.ForeColor = isValid ? Color.Green : Color.Red;
        }
    }
}
